/*
* Generated by python
* Any changes to this file will be overwritten by the next python run
*/

#pragma once

#include "../../config.h"
#include "buffer_type.h"
#if 0\
|| (defined(GL_ARRAY_BUFFER_BINDING))\
|| (defined(GL_ATOMIC_COUNTER_BUFFER_BINDING))\
|| (defined(GL_COPY_READ_BUFFER))\
|| (defined(GL_COPY_WRITE_BUFFER))\
|| (defined(GL_DISPATCH_INDIRECT_BUFFER_BINDING))\
|| (defined(GL_DRAW_INDIRECT_BUFFER_BINDING))\
|| (defined(GL_ELEMENT_ARRAY_BUFFER_BINDING))\
|| (defined(GL_PIXEL_PACK_BUFFER_BINDING))\
|| (defined(GL_PIXEL_UNPACK_BUFFER_BINDING))\
|| (defined(GL_SHADER_STORAGE_BUFFER_BINDING))\
|| (defined(GL_TEXTURE_BINDING_BUFFER))\
|| (defined(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING))\
|| (defined(GL_UNIFORM_BUFFER_BINDING))
namespace Ubpa::gl {
	enum class BufferBinding : GLenum {
#ifdef GL_ARRAY_BUFFER_BINDING
		ArrayBufferBinding = GL_ARRAY_BUFFER_BINDING,
#endif
#ifdef GL_ATOMIC_COUNTER_BUFFER_BINDING
		AtomicCounterBufferBinding = GL_ATOMIC_COUNTER_BUFFER_BINDING,
#endif
#ifdef GL_COPY_READ_BUFFER
		CopyReadBuffer = GL_COPY_READ_BUFFER,
#endif
#ifdef GL_COPY_WRITE_BUFFER
		CopyWriteBuffer = GL_COPY_WRITE_BUFFER,
#endif
#ifdef GL_DISPATCH_INDIRECT_BUFFER_BINDING
		DispatchIndirectBufferBinding = GL_DISPATCH_INDIRECT_BUFFER_BINDING,
#endif
#ifdef GL_DRAW_INDIRECT_BUFFER_BINDING
		DrawIndirectBufferBinding = GL_DRAW_INDIRECT_BUFFER_BINDING,
#endif
#ifdef GL_ELEMENT_ARRAY_BUFFER_BINDING
		ElementArrayBufferBinding = GL_ELEMENT_ARRAY_BUFFER_BINDING,
#endif
#ifdef GL_PIXEL_PACK_BUFFER_BINDING
		PixelPackBufferBinding = GL_PIXEL_PACK_BUFFER_BINDING,
#endif
#ifdef GL_PIXEL_UNPACK_BUFFER_BINDING
		PixelUnpackBufferBinding = GL_PIXEL_UNPACK_BUFFER_BINDING,
#endif
#ifdef GL_SHADER_STORAGE_BUFFER_BINDING
		ShaderStorageBufferBinding = GL_SHADER_STORAGE_BUFFER_BINDING,
#endif
#ifdef GL_TEXTURE_BINDING_BUFFER
		TextureBindingBuffer = GL_TEXTURE_BINDING_BUFFER,
#endif
#ifdef GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
		TransformFeedbackBufferBinding = GL_TRANSFORM_FEEDBACK_BUFFER_BINDING,
#endif
#ifdef GL_UNIFORM_BUFFER_BINDING
		UniformBufferBinding = GL_UNIFORM_BUFFER_BINDING,
#endif
	};
}
#endif

#if 0\
|| (defined(GL_ARRAY_BUFFER_BINDING) && defined(GL_ARRAY_BUFFER))\
|| (defined(GL_ATOMIC_COUNTER_BUFFER_BINDING) && defined(GL_ATOMIC_COUNTER_BUFFER))\
|| (defined(GL_COPY_READ_BUFFER) && defined(GL_COPY_READ_BUFFER))\
|| (defined(GL_COPY_WRITE_BUFFER) && defined(GL_COPY_WRITE_BUFFER))\
|| (defined(GL_DISPATCH_INDIRECT_BUFFER_BINDING) && defined(GL_DISPATCH_INDIRECT_BUFFER))\
|| (defined(GL_DRAW_INDIRECT_BUFFER_BINDING) && defined(GL_DRAW_INDIRECT_BUFFER))\
|| (defined(GL_ELEMENT_ARRAY_BUFFER_BINDING) && defined(GL_ELEMENT_ARRAY_BUFFER))\
|| (defined(GL_PIXEL_PACK_BUFFER_BINDING) && defined(GL_PIXEL_PACK_BUFFER))\
|| (defined(GL_PIXEL_UNPACK_BUFFER_BINDING) && defined(GL_PIXEL_UNPACK_BUFFER))\
|| (defined(GL_SHADER_STORAGE_BUFFER_BINDING) && defined(GL_SHADER_STORAGE_BUFFER))\
|| (defined(GL_TEXTURE_BINDING_BUFFER) && defined(GL_TEXTURE_BUFFER))\
|| (defined(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING) && defined(GL_TRANSFORM_FEEDBACK_BUFFER))\
|| (defined(GL_UNIFORM_BUFFER_BINDING) && defined(GL_UNIFORM_BUFFER))
namespace Ubpa::gl {
	inline BufferBinding BindOf(BufferType type) {
		switch (type) {
#if defined(GL_ARRAY_BUFFER_BINDING) && defined(GL_ARRAY_BUFFER)
		case BufferType::ArrayBuffer:
			return BufferBinding::ArrayBufferBinding;
#endif
#if defined(GL_ATOMIC_COUNTER_BUFFER_BINDING) && defined(GL_ATOMIC_COUNTER_BUFFER)
		case BufferType::AtomicCounterBuffer:
			return BufferBinding::AtomicCounterBufferBinding;
#endif
#if defined(GL_COPY_READ_BUFFER) && defined(GL_COPY_READ_BUFFER)
		case BufferType::CopyReadBuffer:
			return BufferBinding::CopyReadBuffer;
#endif
#if defined(GL_COPY_WRITE_BUFFER) && defined(GL_COPY_WRITE_BUFFER)
		case BufferType::CopyWriteBuffer:
			return BufferBinding::CopyWriteBuffer;
#endif
#if defined(GL_DISPATCH_INDIRECT_BUFFER_BINDING) && defined(GL_DISPATCH_INDIRECT_BUFFER)
		case BufferType::DispatchIndirectBuffer:
			return BufferBinding::DispatchIndirectBufferBinding;
#endif
#if defined(GL_DRAW_INDIRECT_BUFFER_BINDING) && defined(GL_DRAW_INDIRECT_BUFFER)
		case BufferType::DrawIndirectBuffer:
			return BufferBinding::DrawIndirectBufferBinding;
#endif
#if defined(GL_ELEMENT_ARRAY_BUFFER_BINDING) && defined(GL_ELEMENT_ARRAY_BUFFER)
		case BufferType::ElementArrayBuffer:
			return BufferBinding::ElementArrayBufferBinding;
#endif
#if defined(GL_PIXEL_PACK_BUFFER_BINDING) && defined(GL_PIXEL_PACK_BUFFER)
		case BufferType::PixelPackBuffer:
			return BufferBinding::PixelPackBufferBinding;
#endif
#if defined(GL_PIXEL_UNPACK_BUFFER_BINDING) && defined(GL_PIXEL_UNPACK_BUFFER)
		case BufferType::PixelUnpackBuffer:
			return BufferBinding::PixelUnpackBufferBinding;
#endif
#if defined(GL_SHADER_STORAGE_BUFFER_BINDING) && defined(GL_SHADER_STORAGE_BUFFER)
		case BufferType::ShaderStorageBuffer:
			return BufferBinding::ShaderStorageBufferBinding;
#endif
#if defined(GL_TEXTURE_BINDING_BUFFER) && defined(GL_TEXTURE_BUFFER)
		case BufferType::TextureBuffer:
			return BufferBinding::TextureBindingBuffer;
#endif
#if defined(GL_TRANSFORM_FEEDBACK_BUFFER_BINDING) && defined(GL_TRANSFORM_FEEDBACK_BUFFER)
		case BufferType::TransformFeedbackBuffer:
			return BufferBinding::TransformFeedbackBufferBinding;
#endif
#if defined(GL_UNIFORM_BUFFER_BINDING) && defined(GL_UNIFORM_BUFFER)
		case BufferType::UniformBuffer:
			return BufferBinding::UniformBufferBinding;
#endif
		}
	}
}
#endif
