/*
* Generated by python
* Any changes to this file will be overwritten by the next python run
*/

#pragma once

#include "../../config.h"
#include "framebuffer_type.h"
#if 0\
|| (defined(GL_READ_FRAMEBUFFER_BINDING))\
|| (defined(GL_DRAW_FRAMEBUFFER_BINDING))\
|| (defined(GL_FRAMEBUFFER_BINDING))
namespace Ubpa::gl {
	enum class FramebufferBinding : GLenum {
#ifdef GL_READ_FRAMEBUFFER_BINDING
		ReadFramebufferBinding = GL_READ_FRAMEBUFFER_BINDING,
#endif
#ifdef GL_DRAW_FRAMEBUFFER_BINDING
		DrawFramebufferBinding = GL_DRAW_FRAMEBUFFER_BINDING,
#endif
#ifdef GL_FRAMEBUFFER_BINDING
		FramebufferBinding = GL_FRAMEBUFFER_BINDING,
#endif
	};
}
#endif

#if 0\
|| (defined(GL_READ_FRAMEBUFFER_BINDING) && defined(GL_READ_FRAMEBUFFER))\
|| (defined(GL_DRAW_FRAMEBUFFER_BINDING) && defined(GL_DRAW_FRAMEBUFFER))\
|| (defined(GL_FRAMEBUFFER_BINDING) && defined(GL_FRAMEBUFFER))
namespace Ubpa::gl {
	inline FramebufferBinding BindOf(FramebufferType type) {
		switch (type) {
#if defined(GL_READ_FRAMEBUFFER_BINDING) && defined(GL_READ_FRAMEBUFFER)
		case FramebufferType::ReadFramebuffer:
			return FramebufferBinding::ReadFramebufferBinding;
#endif
#if defined(GL_DRAW_FRAMEBUFFER_BINDING) && defined(GL_DRAW_FRAMEBUFFER)
		case FramebufferType::DrawFramebuffer:
			return FramebufferBinding::DrawFramebufferBinding;
#endif
#if defined(GL_FRAMEBUFFER_BINDING) && defined(GL_FRAMEBUFFER)
		case FramebufferType::Framebuffer:
			return FramebufferBinding::FramebufferBinding;
#endif
		}
	}
}
#endif
